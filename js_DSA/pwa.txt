To convert a React application into a Progressive Web App (PWA), you can use a library called "Create React App" (CRA) which includes built-in support for PWAs. Below are the steps to create a PWA with React using Create React App:

### Step 1: Create a New React App

If you don't have Create React App installed, you can install it globally:

```bash
npm install -g create-react-app
```

Now, create a new React app:

```bash
npx create-react-app my-pwa
cd my-pwa
```

### Step 2: Enable PWA Features

By default, Create React App includes PWA features. Open the `src/index.js` file and look for the service worker registration line. It should look like this:

```javascript
serviceWorkerRegistration.register();
```

Ensure that this line is not commented out. The service worker is responsible for caching assets and providing offline support.

### Step 3: Customize Manifest File

Create React App generates a default `public/manifest.json` file. You can customize this file to add details about your app. For example:

```json
{
  "short_name": "MyPWA",
  "name": "My Progressive Web App",
  "description": "This is my PWA.",
  "start_url": "./",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#000000",
  "icons": [
    {
      "src": "./logo192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "./logo512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}
```

Ensure that the icons referenced in the manifest file exist in your project.

### Step 4: Build the App

Build the React app using:

```bash
npm run build
```

### Step 5: Serve the Build

You can use a static server to serve the build. Install a server if you don't have one:

```bash
npm install -g serve
```

Serve the build:

```bash
serve -s build
```

Your PWA should now be accessible at `http://localhost:5000` by default.

### Step 6: Test the PWA

Visit the hosted app in a browser. You can use tools like Google Chrome Developer Tools (Application tab) to inspect the status of the service worker, cache, and other PWA features.

### Step 7: Deploy

To deploy your PWA to a hosting provider, you can upload the contents of the `build` folder. Many hosting providers support static site hosting, and some also have integrated support for PWAs.

These steps should help you turn your React app into a Progressive Web App using Create React App. Remember to customize the manifest file, icons, and other details according to your app's requirements.